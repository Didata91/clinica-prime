-- Create initial admin user Lucas Delfino
-- This will create a user profile and assign admin role

-- First, let's create a function to safely create a user with email/password
-- Note: This is for initial setup only, in production this should be done via admin interface

-- Insert user role for Lucas Delfino (using a known UUID for consistency)
-- In production, this UUID would be generated by Supabase Auth when user signs up
INSERT INTO public.user_roles (user_id, role) 
VALUES ('550e8400-e29b-41d4-a716-446655440000'::uuid, 'admin'::app_role)
ON CONFLICT (user_id, role) DO NOTHING;

-- Insert into usuarios table for additional profile data
INSERT INTO public.usuarios (
  id,
  nome, 
  email,
  senha_hash,
  perfil,
  ativo
) VALUES (
  '550e8400-e29b-41d4-a716-446655440000'::uuid,
  'Lucas Delfino',
  'lucasdelfino91@hotmail.com',
  -- This is a placeholder hash, in production the user would need to be created via Supabase Auth
  '$2a$10$placeholder.hash.for.initial.setup',
  'admin'::perfil_usuario_enum,
  true
) ON CONFLICT (id) DO NOTHING;

-- Create a secure function to verify if a user exists and has correct permissions
CREATE OR REPLACE FUNCTION public.verify_admin_user(user_email text)
RETURNS boolean
LANGUAGE sql
STABLE SECURITY DEFINER
SET search_path TO 'public'
AS $$
  SELECT EXISTS (
    SELECT 1 
    FROM public.usuarios u
    JOIN public.user_roles ur ON u.id = ur.user_id 
    WHERE u.email = user_email 
    AND u.ativo = true 
    AND ur.role = 'admin'
  );
$$;